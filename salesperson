package algospot;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Vector;
class node implements Comparable<node>
{
	int level;
	String path;
	double bound;
	@Override
	public int compareTo(node o) {
		// TODO Auto-generated method stub
		if(this.bound<o.bound)
			return -1;
		else if(this.bound==o.bound)
			return 0;
		else
			return 1;
	}
}
public class salesperson 
{
	static double[][]G;
	static double Bound(node v,int N)
	{
		double bound=0;
		boolean[] check=new boolean[N];
		for(int k=0;k<v.path.length()-1;k++)//visited for sure
		{
			int a=v.path.charAt(k)-48;
			int b=v.path.charAt(k+1)-48;
			//System.out.println(a+" "+b);
			bound+=G[a][b];
			check[a]=true;
			//System.out.println(a);
			//check[b]=true;
		}
		for(int k=0;k<N;k++)
		{
			if(check[k]==false)
			{
				double temp=1500;
				for(int m=0;m<N;m++)//find min in that row
				{
					//if(check[m]==false)
					{	if(G[k][m]<temp )
							temp=G[k][m];
					}
				}
				if(temp!= 1500 && temp != 0)
				{	
					//System.out.println(temp);
					bound+=temp;
				}
			}
		}
		return bound;
	}
	
	public static void main(String[] args) 
	{
		Scanner scanner=new Scanner(System.in);
		int C=scanner.nextInt();
		for(int i=0;i<C;i++)
		{
			int N=scanner.nextInt();
			G=new double[N][N];
			for(int j=0;j<N;j++)
			{
				for(int k=0;k<N;k++)
				{
					G[j][k]=scanner.nextDouble();
				}
			}

			double minLength=150000;
			PriorityQueue <node> PQ=new PriorityQueue <node>();
			node root = new node();
			root.level=0;

			int bound=0;
			for(int p=0;p<N;p++)
			{
				double temp=1500;
				for(int q=0;q<N;q++)//find min in that row
				{
					if(G[p][q]<temp)
					{
						temp=G[p][q];
					}
				}
				if(temp !=1500 && temp !=0)
				{	
					//System.out.println("temp: "+temp);
					bound+=temp;		
				}
			}
			root.bound=bound;
			//System.out.println("root's bound"+root.bound);
			for(int s=0;s<N;s++)
			{
				root.path=s+"";
			//System.out.println("s"+s);
			//root.path="0";
			PQ.add(root);
			while(!PQ.isEmpty())
			{
				node curr=PQ.poll();
				if(curr.bound<minLength)
				{
				//System.out.println("minLength"+minLength);
					boolean[] visited=new boolean[N];
					//System.out.println("here"+curr.path.length());
				
					for(int a=0;a<curr.path.length();a++)
					{	visited[curr.path.charAt(a)-48]=true;
						//System.out.println("check true:"+curr.path.charAt(a));
					}
					for(int r=0;r<N;r++)
					{
						node child=new node();
						if(visited[r]==false)
						{
						
							child.level=curr.level+1;
							child.path=curr.path+r;
							//System.out.println("child.path "+child.path);
							child.bound=Bound(child,N);
							if(child.level==N-1&&child.bound<minLength)
							{	minLength=child.bound;
							//System.out.println(child.path);
							}
							if(child.bound<minLength)
								PQ.add(child);
						}
						//else
						//	System.out.println("visited child.path "+child.path);
					}
				}
				//else
				//	System.out.println("falied");
				
			}
			}
			System.out.print(minLength);
			System.out.print("000");
			System.out.println();
		}	
	}
}
